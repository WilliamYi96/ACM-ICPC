Today I had solved the problem UVa621, which is a Secret Research.
And the problem in detail can be seen in UVa OJ, So I am not wordy now.
As  this problem urges us to input n in string form, I have two methods to solve this problem. 
One is to use a string array defined in <string.h> while another is using a string defined in <string>.
Next are the codes.

  By String:
  #include<iostream>
  #include<cstdio>
  #include<cstring>
  #include<string>
  using namespace std;

  int main() {
      int t;
      string s;
      cin >> t;
      while(t--) {
          cin >> s;
          if(s=="1" || s=="4" || s=="78") cout << "+\n";
          else if(s[s.length()-1] == '5' && s[s.length()-2] == '3') cout << "-\n";
          //pay attention to the calculate of the length of a string
          else if(s[0] == '9' && s[s.length()-1] == '4') cout << "*\n";
          else if(s[0] == '1' && s[1] == '9' && s[2] == '0') cout << "?\n";
      }
      return 0;
  }

By Character Array:
#include<cstdio>
#include<cstring>
using namespace std;
int main() {
    int t;
    scanf("%d", &t);
    while(t--) {
        char ret[50];
        memset(ret, '0', sizeof(ret));
        scanf("%s", ret);
        if(!strcmp(ret, "4") || !strcmp(ret, "1") || !strcmp(ret, "78"))
            printf("+\n");
        else if(ret[strlen(ret)-1] == '5' && ret[strlen(ret)-2] == '3')
        //the element in string is a char
            printf("-\n");
        else if(ret[0] == '9' && ret[strlen(ret)-1] == '4')
            printf("*\n");
        else printf("?\n");
    }
    return 0;
}

Next is my harvest after thinking and solving this problem:
a) Difference about calculating the length of a character array and a string.
	As we use strlen(s) to calculate the length of a character array defined in <cstring>
	while we use s.length() to calculate the length of a string defined in <string>;
b) We can view the elements in a string as a char instead of a number.
